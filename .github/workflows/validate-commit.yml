name: Validate PR and Commit Messages

on:
  push:
    branches:
      - develop
      - main

  pull_request:
    branches:
      - develop
      - main
    types: [opened, synchronize, edited, reopened]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    name: Validate PR and Commit Messages

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Make validation script executable
        run: chmod +x .hooks/validate-commit-msg.sh

      - name: Get commits to validate (push or PR)
        id: commits
        run: |
          echo "🔁 Detecting event type..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "📦 Pull request event"
            git fetch origin ${{ github.event.pull_request.base.ref }}
            git fetch origin ${{ github.event.pull_request.head.ref }}
            COMMITS=$(git log --pretty=format:'%H' origin/${{ github.event.pull_request.base.ref }}..origin/${{ github.event.pull_request.head.ref }})
            echo "${{ github.event.pull_request.title }}" > .hooks/.temp-pr-title
            echo "PR_TITLE=true" >> $GITHUB_ENV
          else
            echo "🚀 Push event"
            git fetch origin
            COMMITS=$(git log --pretty=format:'%H' ${{ github.event.before }}..${{ github.sha }})
            echo "PR_TITLE=false" >> $GITHUB_ENV
          fi
          echo "$COMMITS" > commits.txt

      - name: Validate commit messages (and PR title if exists)
        run: |
          ERROR_FOUND=0

          if [ "$PR_TITLE" = "true" ]; then
            echo "🔍 Validating Pull Request title..."
            echo "📝 Title: $(cat .hooks/.temp-pr-title)"
            if ! ./.hooks/validate-commit-msg.sh .hooks/.temp-pr-title; then
              echo "::error title::Pull Request title failed validation"
              ERROR_FOUND=1
            else
              echo "✅ Pull Request title is valid"
            fi
          else
            echo "ℹ️ No PR title to validate (push event)"
          fi

          echo "🔍 Validating commit messages..."
          while read COMMIT; do
            MESSAGE=$(git show -s --format=%B "$COMMIT")

            if echo "$MESSAGE" | grep -qE "^Merge "; then
              echo "⚠️ Skipping merge commit: $COMMIT"
              continue
            fi

            echo "🔎 Validating commit: '$MESSAGE'"
            echo "$MESSAGE" > .hooks/.temp-commit-msg

            if ! ./.hooks/validate-commit-msg.sh .hooks/.temp-commit-msg; then
              echo "::error file=.git/COMMIT_EDITMSG,line=1::Commit $COMMIT failed validation"
              ERROR_FOUND=1
            fi
          done < commits.txt

          if [ "$ERROR_FOUND" -ne 0 ]; then
            echo "❌ One or more validations failed."
            exit 1
          else
            echo "🎉 All validations passed"
          fi

